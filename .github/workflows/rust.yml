# .github/workflows/rust.yml

name: Rust CI

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always # 让 cargo 输出带颜色，方便在日志中查看

jobs:
  # --- 1. 测试和基础检查 ---
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check code formatting
        run: cargo fmt --all -- --check

      - name: Run linter (Clippy)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --verbose

  # --- 2. 构建 Release ---
  build:
    name: Build Release
    # 只有在推送标签时才运行此 job
    if: startsWith(github.ref, 'refs/tags/')
    needs: test # 依赖于 test job 成功
    strategy:
      matrix:
        # 定义要构建的目标平台
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: fire-cli
            asset_name: fire-cli-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: fire-cli.exe
            asset_name: fire-cli-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: fire-cli
            asset_name: fire-cli-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: fire-cli
            asset_name: fire-cli-macos-aarch64

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          # 为每个目标平台添加对应的工具链
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build for target
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        # 在 Linux 和 macOS 上，strip 可以减小二进制文件大小
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Upload artifact
        # 将构建好的二进制文件作为 GitHub Actions 的 artifact 保存
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  # --- 3. 发布 Release ---
  release:
    name: Release
    # 只有在推送标签时才运行
    if: startsWith(github.ref, 'refs/tags/')
    needs: [test, build] # 依赖于 test 和 build job 成功
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        # 从 build job 下载所有构建好的二进制文件
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Create Release
        # 使用 GitHub CLI 创建一个 Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }} # 使用推送的标签名
          release_name: Release ${{ github.ref_name }}
          draft: false # 是否是草稿
          prerelease: false # 是否是预发布版本

      - name: Upload Release Assets
        # 将下载的 artifacts 作为附件上传到刚刚创建的 Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: artifacts/**/*
